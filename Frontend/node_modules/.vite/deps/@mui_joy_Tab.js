"use client";
import {
  getTabUtilityClass,
  tabClasses_default
} from "./chunk-6JWIMMEM.js";
import {
  useTab
} from "./chunk-UYKNH72I.js";
import "./chunk-ZPQ4Y73R.js";
import "./chunk-3IHV7RO6.js";
import "./chunk-OTE6NKTV.js";
import "./chunk-Z2YCEOFD.js";
import "./chunk-XW2S4G7U.js";
import {
  StyledListItemButton
} from "./chunk-GTLSUCEB.js";
import {
  ListItemButtonOrientationContext_default
} from "./chunk-5GXMTO2C.js";
import {
  RowListContext_default
} from "./chunk-ZDM2CMEK.js";
import "./chunk-YDKLAXQ2.js";
import "./chunk-RRJ5VGGI.js";
import "./chunk-X6XH2MJD.js";
import {
  useSlot
} from "./chunk-LZWGGKHI.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-FNHEREGS.js";
import "./chunk-YOWY3T5W.js";
import "./chunk-VCO4XS3L.js";
import "./chunk-4ZEKIJ2W.js";
import {
  init_esm,
  useForkRef
} from "./chunk-OHHGBKGX.js";
import {
  capitalize,
  composeClasses
} from "./chunk-QF4DLIX5.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  init_extends,
  init_objectWithoutPropertiesLoose
} from "./chunk-IBGFKGCE.js";
import {
  require_prop_types
} from "./chunk-FUOYWSSY.js";
import "./chunk-V5K6VRA4.js";
import {
  require_jsx_runtime
} from "./chunk-OT5EQO2H.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@mui/joy/Tab/Tab.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_esm();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "orientation", "variant", "color", "disableIndicator", "indicatorPlacement", "indicatorInset", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    selected,
    disabled,
    focusVisible,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled", focusVisible && "focusVisible", selected && "selected", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getTabUtilityClass, {});
};
var TabRoot = styled_default(StyledListItemButton, {
  name: "JoyTab",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => [
  {
    flex: "initial",
    justifyContent: ownerState.row ? "center" : "initial",
    "--unstable_ListItemDecorator-alignItems": "center",
    "--unstable_offset": "min(calc(-1 * var(--variant-borderWidth, 0px)), -1px)"
  },
  !ownerState.disableIndicator && {
    '&[aria-selected="true"]': {
      "--Tab-indicatorColor": "currentColor",
      zIndex: 1
      // to stay above other tab elements
    },
    // using pseudo element for showing active indicator is best for controlling the size and customization.
    // for example, developers can customize the radius, width or background.
    // (border and box-shadow are not flexible when it comes to customization).
    "&::after": {
      content: '""',
      display: "block",
      position: "absolute",
      margin: "auto",
      background: "var(--Tab-indicatorColor)",
      borderRadius: "var(--Tab-indicatorRadius)"
    }
  },
  // the padding is to account for the indicator's thickness to make the text proportional.
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "bottom" && {
    paddingBottom: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorThickness)",
      width: "var(--Tab-indicatorSize)",
      left: ownerState.indicatorInset ? "var(--ListItem-paddingLeft)" : "var(--unstable_offset)",
      right: ownerState.indicatorInset ? "var(--ListItem-paddingRight)" : "var(--unstable_offset)",
      bottom: "calc(-1px - var(--unstable_TabList-underlineBottom, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "top" && {
    paddingTop: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorThickness)",
      width: "var(--Tab-indicatorSize)",
      left: ownerState.indicatorInset ? "var(--ListItem-paddingLeft)" : "var(--unstable_offset)",
      right: ownerState.indicatorInset ? "var(--ListItem-paddingRight)" : "var(--unstable_offset)",
      top: "calc(-1px - var(--unstable_TabList-underlineTop, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "right" && {
    paddingRight: "calc(var(--ListItem-paddingRight) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorSize)",
      width: "var(--Tab-indicatorThickness)",
      top: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      bottom: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      right: "calc(-1px - var(--unstable_TabList-underlineRight, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "left" && {
    paddingLeft: "calc(var(--ListItem-paddingLeft) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorSize)",
      width: "var(--Tab-indicatorThickness)",
      top: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      bottom: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      left: "calc(-1px - var(--unstable_TabList-underlineLeft, 0px))"
    }
  }
]);
var Tab = React.forwardRef(function Tab2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTab"
  });
  const row = React.useContext(RowListContext_default);
  const {
    action,
    children,
    disabled = false,
    component = "button",
    orientation = "horizontal",
    variant = "plain",
    color = "neutral",
    disableIndicator = false,
    indicatorPlacement = row ? "bottom" : "right",
    indicatorInset = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const tabRef = React.useRef();
  const handleRef = useForkRef(tabRef, ref);
  const {
    active,
    focusVisible,
    setFocusVisible,
    selected,
    getRootProps
  } = useTab(_extends({}, props, {
    rootRef: handleRef
  }));
  React.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      tabRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    disableIndicator,
    indicatorPlacement,
    indicatorInset,
    orientation,
    row,
    active,
    focusVisible,
    disabled,
    selected,
    variant,
    color
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? Tab.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.shape({
      focusVisible: import_prop_types.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, the pseudo element indicator is hidden.
   * @default false
   */
  disableIndicator: import_prop_types.default.bool,
  /**
   * If `true`, the indicator stay within the padding based on the `Tabs` orientation.
   * @default false
   */
  indicatorInset: import_prop_types.default.bool,
  /**
   * The indicator's position when the Tab is selected.
   * @default row ? 'bottom' : 'right'
   */
  indicatorPlacement: import_prop_types.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types.default.func,
  /**
   * The content direction flow.
   * @default 'horizontal'
   */
  orientation: import_prop_types.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * You can provide your own value. Otherwise, it falls back to the child position index.
   */
  value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var Tab_default = Tab;
export {
  Tab_default as default,
  getTabUtilityClass,
  tabClasses_default as tabClasses
};
//# sourceMappingURL=@mui_joy_Tab.js.map
