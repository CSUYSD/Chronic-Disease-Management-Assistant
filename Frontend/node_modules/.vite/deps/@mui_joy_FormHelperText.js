"use client";
import {
  formControlClasses_default
} from "./chunk-FGNAZYPL.js";
import {
  formLabelClasses_default
} from "./chunk-VG7A3RP3.js";
import {
  FormControlContext_default
} from "./chunk-ND2DAPSI.js";
import "./chunk-YDKLAXQ2.js";
import "./chunk-RRJ5VGGI.js";
import {
  useSlot
} from "./chunk-LZWGGKHI.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-FNHEREGS.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-YOWY3T5W.js";
import "./chunk-VCO4XS3L.js";
import "./chunk-4ZEKIJ2W.js";
import {
  init_esm,
  useForkRef
} from "./chunk-OHHGBKGX.js";
import {
  composeClasses
} from "./chunk-QF4DLIX5.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  init_extends,
  init_objectWithoutPropertiesLoose
} from "./chunk-IBGFKGCE.js";
import {
  require_prop_types
} from "./chunk-FUOYWSSY.js";
import "./chunk-V5K6VRA4.js";
import {
  require_jsx_runtime
} from "./chunk-OT5EQO2H.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/FormHelperText/formHelperTextClasses.js
function getFormHelperTextUtilityClass(slot) {
  return generateUtilityClass("MuiFormHelperText", slot);
}
var formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root"]);
var formHelperTextClasses_default = formHelperTextClasses;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["children", "component", "slots", "slotProps"];
var useUtilityClasses = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getFormHelperTextUtilityClass, {});
};
var FormHelperTextRoot = styled_default("div", {
  name: "JoyFormHelperText",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  "--Icon-fontSize": "calc(var(--FormHelperText-lineHeight) * 1em)",
  display: "flex",
  alignItems: "center",
  gap: "2px",
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormHelperText-fontSize, ${theme.vars.fontSize.sm})`,
  lineHeight: `var(--FormHelperText-lineHeight, ${theme.vars.lineHeight.sm})`,
  color: `var(--FormHelperText-color, ${theme.vars.palette.text.tertiary})`,
  margin: "var(--FormHelperText-margin, 0px)",
  [`.${formLabelClasses_default.root} + &`]: {
    "--FormHelperText-margin": "0px"
    // remove the margin if the helper text is next to the form label.
  },
  [`.${formControlClasses_default.error} &`]: {
    "--Icon-color": "currentColor"
  }
}));
var FormHelperText = React.forwardRef(function FormHelperText2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyFormHelperText"
  });
  const {
    children,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const rootRef = React.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  const formControl = React.useContext(FormControlContext_default);
  const setHelperText = formControl == null ? void 0 : formControl.setHelperText;
  React.useEffect(() => {
    setHelperText == null || setHelperText(rootRef.current);
    return () => {
      setHelperText == null || setHelperText(null);
    };
  }, [setHelperText]);
  const classes = useUtilityClasses();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    elementType: FormHelperTextRoot,
    externalForwardedProps,
    ownerState: props,
    additionalProps: {
      as: component,
      id: formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.root
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? FormHelperText.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object])
} : void 0;
var FormHelperText_default = FormHelperText;
export {
  FormHelperText_default as default,
  formHelperTextClasses_default as formHelperTextClasses,
  getFormHelperTextUtilityClass
};
//# sourceMappingURL=@mui_joy_FormHelperText.js.map
